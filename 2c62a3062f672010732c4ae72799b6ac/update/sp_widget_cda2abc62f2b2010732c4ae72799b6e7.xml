<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($rootScope, $scope, spUtil, spModal) {
	/* widget controller */
	var c = this;
	c.user = c.data.user;

	// for now
	c.isGameHost = true;
	c.data.team_one_score = 43;
	c.data.team_two_score = 98;
	c.data.round_score = 0;

	var questions = Object.keys(feudJSON);
	var answers = Object.values(feudJSON);
	var question_index = null;
	var used_questions = [];


	// watch for updates to the game data	
	function isRefreshNeededForChanges(changes) {
		var isNeeded = changes.length > 0 && !(
			changes.length == 1 && (
				changes[0] == 'wrong_answer_count' || changes[0] == 'current_answer_index'
			)
		);

		return isNeeded;
	}

	spUtil.recordWatch($scope, "x_159204_feudnow_game", "active=true", function(name) {
		
		if (name.data.record.current_answer_index.value) {
			var ans_element = '#a' + (parseInt(name.data.record.current_answer_index.value) + 1);
			var pnt_element = '#p' + (parseInt(name.data.record.current_answer_index.value) + 1);
			$(ans_element).val(name.data.record.current_answer.value);
			$(pnt_element).val(name.data.record.current_answer_points.value);
			c.data.round_score = name.data.record.round_score.value;			
		}
		

		if (name.data.record.wrong_answer_count.value) {
			var count = parseInt(name.data.record.wrong_answer_count.value);

			if (count == 1) {
				$('#x1').show();
				$('#x2, #x3').hide();
			}
			
			if (count == 2) {
				$('#x1, #x2').show();
				$('#x3').hide();
			}
			
			if (count == 3) {
				$('#x1, #x2, #x3').show();
				
				// show the big green buttons for host
				$('.big-button.green').css('visibility', 'visible');
			}			

			$('.big-x-container').show().delay(1000).fadeOut();
		}

		if (isRefreshNeededForChanges(name.data.changes))
			$scope.server.update();

	});	


	// open the question card for the host
	c.openQuestion = function(element) {
		question_index = Math.floor(Math.random() * questions.length);	
		c.question = questions[question_index];

		// track the questions that were aleady asked
		used_questions.push(question_index);

		c.answer_list = answers[question_index];

		$('.modal').modal({ backdrop: false, show: true });

		// update the used question index on the table
		c.server.get({
			action: 'updateUsedQuestionIndexes',	
			questionIndex: question_index
		});

	};	

	$('.modal-header').on('mousedown', function(mousedownEvt) {
		var $draggable = $(this);
		var x = mousedownEvt.pageX - $draggable.offset().left,
				y = mousedownEvt.pageY - $draggable.offset().top;

		$('body').on('mousemove.draggable', function(mousemoveEvt) {
			$draggable.closest(".modal-dialog").offset({
				"left": mousemoveEvt.pageX - x,
				"top": mousemoveEvt.pageY - y
			});
		});
		$('body').one('mouseup', function() {
			$("body").off('mousemove.draggable');
		});
		$draggable.closest('.modal').one('bs.modal.hide', function() {
			$('body').off('mousemove.draggable');
		});
	});


	// show big X
	c.showBigX = function() {
		// update count of wrong answers
		c.server.get({
			action: 'updateWrongAnswerCount'			
		});
	}


	// display the answer
	c.revealAnswer = function(index) {
		var selected_answer_index = index;
		var selected_answer_text = answers[question_index][selected_answer_index][0];
		var selected_answer_points = answers[question_index][selected_answer_index][1];	

		// update the score for the round
		c.server.get({
			action: 'updateRoundScore',
			question: questions[question_index],	
			answerIndex: selected_answer_index,
			answer: selected_answer_text,
			points: selected_answer_points
		}).then(function() {
			// remove the selected answer from the answer list
			$('#answ' + index).hide();
		})

	}


	// "Name a toy you always see in pictures of Santa's Workshop":[["Doll",39],["Stuffed Animal",13],["Train",11],["Rocking Horse",9],["Toy Soldier",9],["Drum",4],["Ball",3],["Wagon",3]],

};]]></client_script>
        <controller_as>c</controller_as>
        <css>* {
  box-sizing: border-box;
}

html {
  height: 100%;
  width: 100%;
}	

a {
  cursor: pointer;  
}

#scores-container {
  display: grid;
  grid-column-gap: 10px;
  grid-template-columns: auto auto auto;
  width: 80%;
  padding: 15px;
  margin-left: auto;
  margin-right: auto;  
  border: 2px solid #666; 
  border-bottom-width: 0px;
  font-size: 30px;
  text-align: center;
}

.grid-container {
  display: grid;
  grid-column-gap: 5px;
  grid-template-columns: auto auto auto;
  padding: 5px;
  border-radius: 10px;
  Xmargin-top: 100px;
}

.grid-item {
  font-size: 20px;
  text-align: center;
}
	
.gameboard {
  min-width: 700px;
  min-height: 500px;
  padding: 10px 10px;
  border: #111 solid;
  border-width: 14px 10px;
  background-color: #0642a3;
}

.left {
  float: left;
}

.right {
  float: right;
}

.column {
  width: 50%;
  height: 100%;
  text-align: center;
}

.item {
   margin: 8px 0;   
}

.gameboard input {
  border: none;
  font-size: 30px;
  color: #f2f2f2;
  padding: 2px 8px;
  margin: 0x;
  background-color: #111;
  border-radius: 2px;
  border: 1px solid #ccc;
}

.gameboard .item input:nth-child(1) {
  width: 60%;
}
.gameboard .item input:nth-child(2) {
  width: 15%;
}

.host-grid-container {
  display: grid;
  grid-template-columns: auto auto auto;
  grid-gap: 10px;
  justify-content: space-evenly;
  width: 100%;
  margin-left: auto;
  margin-right: auto;  
}

.host-grid-container-buttons {
  display: grid;
  grid-template-columns: auto auto auto;
  grid-gap: 10px;
  justify-content: space-evenly;
  width: 100%;
  margin-left: auto;
  margin-right: auto;  
}

.big-button {
  padding: 25px;
  text-align: center;
  color: white;
  width: 100px;
  height: 100px;
  border-radius: 50%;
  border: 4px solid #000;
}

.big-button.red {
  background-color: red; 
  font-size: 30px;
}

.big-button.green {
  visibility: hidden;
  background-color: green;
}

.big-button:hover {
  cursor: pointer;
  -webkit-transform: scale(1.2);
  -ms-transform: scale(1.2);
  transform: scale(1.2);
}

#new-question-button {
  grid-column: 2;
  grid-row: 2; 
  justify-content: space-evenly;
}

.total input {
  width: 50%;
  margin-right: 5%;
  float: right;
}

.answer:hover {
  cursor: pointer;
}

.big-x-container {
  display: none;
  position: absolute;
  width: 100%;
  top: 50px;
  text-align: center;
}

.big-x {
  text-align: center;
  font-size: 150px;
  color: red;
  border: 15px solid red;
}

#question_card {
  position: relative;
}

.modal-header:hover {
	cursor: move; 
}

.modal-dialog {
  position: fixed;
  margin: 0;
  padding: 10px;
}


</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>feudnow</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>FeudNow</name>
        <option_schema>[{"displayValue":"User","name":"game_host","section":"Presentation","label":"Game host","type":"reference","value":"sys_user","ed":{"reference":"sys_user"}}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	
	if (input) {
		var gr = new GlideRecord('x_159204_feudnow_game');
		//gr.get($sp.getParameter('game_id'));	
		gr.get('ea7006092f7b2010732c4ae72799b67f');
		
		if (input.action == 'updateRoundScore') {					
			var score = gr.round_score + input.points;

			gr.setValue('current_question', input.question);
			gr.setValue('current_answer', input.answer);
			gr.setValue('current_answer_index', input.answerIndex);
			gr.setValue('current_answer_points', input.points);
			gr.setValue('round_score', score);
			gr.updateMultiple();
		}		
		
		if (input.action == 'updateUsedQuestionIndexes') {
			var used_question_indexes = gr.used_question_indexes + input.questionIndex + ', ';
			gr.setValue('used_question_indexes', used_question_indexes);
			gr.update();
		}
		
		if (input.action == 'updateWrongAnswerCount') {
			var count = gr.wrong_answer_count;
			if (count == 3) 
				count = 0;
			
			count++;
			
			gr.setValue('wrong_answer_count', count);
			gr.update();
		}		

	}	



	data.user = gs.getUserID();

	/*
	function logPlayerEntry() {
		var gr = new GlideRecord('x_159204_feudnow_players')
		gr.addQuery('player', gs.getUserID())
		gr.query()

		if (!gr.next()) {
			gr.initialize()
			gr.player = gs.getUserID()
			gr.team_number = 1
			gr.insert()
		}
	}
	*/

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>rpoore_admin</sys_created_by>
        <sys_created_on>2021-04-18 00:38:34</sys_created_on>
        <sys_id>cda2abc62f2b2010732c4ae72799b6e7</sys_id>
        <sys_mod_count>491</sys_mod_count>
        <sys_name>FeudNow</sys_name>
        <sys_package display_value="FeudNow" source="x_159204_feudnow">2c62a3062f672010732c4ae72799b6ac</sys_package>
        <sys_policy/>
        <sys_scope display_value="FeudNow">2c62a3062f672010732c4ae72799b6ac</sys_scope>
        <sys_update_name>sp_widget_cda2abc62f2b2010732c4ae72799b6e7</sys_update_name>
        <sys_updated_by>rpoore_admin</sys_updated_by>
        <sys_updated_on>2021-05-11 03:03:01</sys_updated_on>
        <template><![CDATA[<!--
<span class="navbar-avatar">
<sn-avatar class="avatar-medium" primary="user" show-presence="true" />
</span>  

<div>
<img src="https://joeschmoe.io/api/v1/male/random" width="48px" />
</div>    

-->

<div id="scores-container">
  <div>Team 1</div>
  <div>Total Points</div>
  <div>Team 2</div>
  <div>{{c.data.team_one_score}}</div>
  <div>{{c.data.round_score}}</div>
  <div>{{c.data.team_two_score}}</div>  
</div>

<div class="grid-container">
  <!-- left column -->
  <div class="grid-item">

    <!-- avatar -->
    <div class="grid-item">
      <sn-avatar class="avatar-large" primary="user" show-presence="true" />
    </div>  

    <!-- avatar -->
    <div class="grid-item">
      5
    </div> 	
  </div>

  <!-- middle column -->
  <div class="grid-item">

    <div class="grid-item">
      <div class="gameboard">

        <div class="left column">

          <div class="item">  
            <input id="a1" class="answer" value="1" readonly />
            <input id="p1" readonly />
          </div>
          <div class="item">
            <input id="a2" class="answer" value="2" readonly />
            <input id="p2" readonly />
          </div>         
          <div class="item">
            <input id="a3" class="answer" value="3" readonly />
            <input id="p3" readonly />
          </div>          
          <div class="item">
            <input id="a4" class="answer" value="4" readonly />
            <input id="p4" readonly />
          </div>          
          <div class="item">
            <input id="a5" class="answer" value="5" readonly />
            <input id="p5" readonly />
          </div>
        </div>

        <div class="right column"> 
          <div class="item">
            <input id="a6" class="answer" value="6" readonly />
            <input id="p6" readonly />
          </div>
          <div class="item">
            <input id="a7" class="answer" value="7" readonly />
            <input id="p7" readonly />
          </div>
          <div class="item">
            <input id="a8" class="answer" value="8" readonly />
            <input id="p8" readonly />
          </div>
          <div class="item">
            <input id="a9" class="answer" value="9" readonly />
            <input id="p9" readonly />
          </div>
          <div class="item">
            <input id="a10" class="answer" value="10" readonly />
            <input id="p10" readonly />
          </div>
        </div>
      </div> 
    </div>    
  </div>

  <!-- right column -->
  <div class="grid-item">
 
    <!-- avatar -->
    <div class="grid-item">
      <img src="https://joeschmoe.io/api/v1/josh" width="48px" />   
    </div>  

    <!-- avatar -->
    <div class="grid-item">7</div> 	
  </div>  

</div> 

<!-- host view -->
<div class="host-grid-container" ng-show="c.isGameHost">
  <div id="new-question-button">
    <button ng-click="c.openQuestion()" class="btn btn-default">
      New Question
    </button>   
  </div>
</div>



<!-- Question card -->
<div id="question_card" class="modal fade" tabindex="-1" role="dialog" ng-show="c.isGameHost">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4>{{c.question}}</h4>
      </div>
      <div class="modal-body">
        <ul>
          <li ng-repeat="answer in c.answer_list" id="{{'answ' + $index}}">
            <a ng-click="c.revealAnswer($index)">{{answer[0]}}</a>
          </li>
        </ul>
      </div>

      <div class="host-grid-container-buttons">
      <div class="big-button green">Team One</div>
        <div class="big-button red" ng-click="c.showBigX()">X</div>
        <div class="big-button green">Team Two</div>
      </div>      

      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>



<!-- player view -->
<div>

</div>


<!-- big X -->
<div class="big-x-container">
  <span id="x1" class="big-x"><b>&nbsp;X&nbsp;</b></span>
  <span id="x2" class="big-x"><b>&nbsp;X&nbsp;</b></span>
  <span id="x3" class="big-x"><b>&nbsp;X&nbsp;</b></span>
</div>





]]></template>
    </sp_widget>
</record_update>
